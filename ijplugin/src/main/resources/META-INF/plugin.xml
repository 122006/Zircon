<idea-plugin>
    <id>com.by122006.zircon.ijplugin</id>
    <vendor email="1109108466@qq.com" url="https://github.com/122006/Zircon">122006</vendor>
    <description><![CDATA[
        <strong>Zircon / Magic Syntax in Java</strong>
        <p>Allows you to use the <b>'template string' & 'extension method' & 'optional chaining' & 'elvis expression'</b> syntax in the Java language.</p>
        <p>The plugin provides IDEA to parse template strings in Java, including highlighting keywords, providing code
            completion, automatic fix, and other effects.</p>
        <p>like the same features in other languages with Java enhancements.</p>
        <ol>
            <li><p>Support android, Java and other projects using Javac</p></li>
            <li><p>Code content support IDEA completion prompt (need to install IDEA plug-in)</p></li>
            <li><p>More syntax sugar support</p></li>
        </ol>
        <p>After installing this idea plugin, if you are building your project using Maven or Gradle, you will need to
            install the build plugin.</p>
        </p>
        <p>Step 1. In your root project &#39;build.gradle&#39; file, do the following</p>
        <code>
            <p>buildscript {</p>
            <p> repositories {</p>
            <p> maven { url &#39;https://jitpack.io&#39; }</p>
            <p> }</p>
            <p> dependencies {</p>
            <p> classpath &#39;com.github.122006.Zircon:gradle:+&#39;</p>
            <p> }</p>
            <p>} </p>
        </code>
        <p>Step 2. In the &#39;build.gradle&#39; file of the module where you want to use the plug-in, do the
            following</p>
        <ol>
            <li>Introduce the plug-in in the first line</li>
        </ol>
        <p><code>apply plugin: &#39;zircon&#39;</code></p>
        </p>
        </p>
        <p>Maven is also supported, See more: <a href="https://github.com/122006/Zircon">https://github.com/122006/Zircon</a>
        </p>
        ]]></description>
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>
    <name>Zircon</name>
    <change-notes><![CDATA[
        <p>Add 2 features. Allows you to use the <b>'optional chaining' & 'elvis expression'</b> syntax in the Java language.</p>
        ]]></change-notes>
    <extensions defaultExtensionNs="com.intellij">
        <!-- Add your extensions here -->
    </extensions>
    <actions>
        <group id="Zircon" popup="true" text="Zircon">
            <separator/>
            <action id="com.by122006.zircon.ijplugin.ZrReplaceAllAction"
                    class="com.by122006.zircon.ijplugin.ZrReplaceAllAction"
                    text="[ZrMethod] Replace All with Extension Method"
                    description="Replace all normal methods modified by @ExMethod as extension methods">
            </action>
            <action id="com.by122006.zircon.ijplugin.ZrDeReplaceAllAction"
                    class="com.by122006.zircon.ijplugin.ZrDeReplaceAllAction"
                    text="[ZrMethod] Replace All with Normal Method"
                    description="Replace all extension methods modified by @ExMethod  as normal methods">
            </action>
            <add-to-group group-id="EditMenu" anchor="last"/>
        </group>

    </actions>
    <extensions defaultExtensionNs="com.intellij">
        <languageInjector implementation="com.by122006.zircon.ijplugin.ZrStringLiteralInjector" order="first"/>
        <lang.parserDefinition language="JAVA"
                               implementationClass="com.by122006.zircon.ijplugin.ZrJavaParserDefinition"
                               order="first"/>
        <lang.syntaxHighlighter language="JAVA"
                                implementationClass="com.by122006.zircon.ijplugin.ZrJavaFileHighlighter"
                                order="first"/>
        <applicationService serviceInterface="com.intellij.lang.PsiBuilderFactory"
                            serviceImplementation="com.by122006.zircon.ijplugin.ZrPsiBuilderFactoryImpl"
                            overrides="true"/>
        <annotator language="JAVA" implementationClass="com.by122006.zircon.ijplugin.ZrAnnotator"/>
        <!--        <projectService serviceInterface="com.intellij.psi.impl.source.resolve.JavaResolveCache"-->
        <!--                        serviceImplementation="com.by122006.zircon.ijplugin.ZrJavaResolveCache" overrides="true"/>-->
        <!--        <inspection.basicVisitor class="com.by122006.zircon.ijplugin.ZrJavaElementVisitor"/>-->
        <implicitUsageProvider implementation="com.by122006.zircon.ijplugin.ZrStringLiteralTemplateUsageProvider"/>
        <implicitUsageProvider implementation="com.by122006.zircon.ijplugin.ZrExMethodUsageProvider"/>.
        <lang.foldingBuilder language="JAVA" implementationClass="com.by122006.zircon.ijplugin.ZrFoldingBuilder"/>
        <daemon.highlightInfoFilter implementation="com.by122006.zircon.ijplugin.ZrHighlightInfoFilter"/>
        <quoteHandler fileType="JAVA" order="first" className="com.by122006.zircon.ijplugin.ZrJavaQuoteHandler"/>
        <enterHandlerDelegate implementation="com.by122006.zircon.ijplugin.ZrEnterInStringLiteralHandler"
                              order="first"/>
        <highlightVisitor implementation="com.by122006.zircon.ijplugin.ZrHighlightVisitor" order="first"/>
        <projectService serviceInterface="com.intellij.psi.codeStyle.JavaCodeStyleManager"
                        serviceImplementation="com.by122006.zircon.ijplugin.ZrJavaCodeStyleManagerImpl"
                        overrides="true"/>
        <lang.psiAugmentProvider implementation="com.by122006.zircon.ijplugin.ZrPsiAugmentProvider"/>
        <findUsagesHandlerFactory implementation="com.by122006.zircon.ijplugin.ZrFindUsagesHandlerFactory"/>
        <completion.contributor language="JAVA"
                                implementationClass="com.by122006.zircon.ijplugin.ZrCompletionContributor"
                                order="first"/>
        <applicationConfigurable
                parentId="tools"
                instance="com.by122006.zircon.ijplugin.ZrRootSettingsConfigurable"
                id="ZrRootSettingsConfigurable"
                displayName="Zircon"/>
        <applicationConfigurable
                parentId="ZrRootSettingsConfigurable"
                instance="com.by122006.zircon.ijplugin.ZrStringSettingsConfigurable"
                id="ZrStringSettingsConfigurable"
                displayName="Template String"/>
        <applicationConfigurable
                parentId="ZrRootSettingsConfigurable"
                instance="com.by122006.zircon.ijplugin.ZrExMethodSettingsConfigurable"
                id="ZrExMethodSettingsConfigurable"
                displayName="Extension Method"/>
        <applicationService serviceImplementation="com.by122006.zircon.ijplugin.ZirconSettings"/>
        <projectService serviceInterface="com.intellij.codeInsight.AutoPopupController"
                        serviceImplementation="com.by122006.zircon.ijplugin.ZrAutoPopupController"
                        overrides="true"/>
    </extensions>
</idea-plugin>
