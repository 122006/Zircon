ext {
    version = "3.2.3"
    groupId = "com.github.122006.Zircon"
}

buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://maven.aliyun.com/repository/spring/'
        }
        maven { url 'https://maven.aliyun.com/repository/jcenter/' }
        google()
        maven { url "https://s01.oss.sonatype.org/content/groups/public" }
        mavenCentral()

    }
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven {
        url uri('../../repo')
    }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}
ext {
    testJavaVersion = Integer.valueOf(project.getProperties().getOrDefault('tjv', 22))
// gradle testWithDiffJavaVersion -Ptjv=21
}
if (System.getProperty("user.name", "") != "jitpack") {
    def allData = [
            [version: 8, project: ":inject_java7"]
            , [version: 11, project: ":inject_java11"]
            , [version: 17, project: ":inject_java16"]]
    def useJavaVersion = allData.collect { it.get("version") }.findAll { it <= ext.testJavaVersion }.max { it }

    task testWithDiffJavaVersion {
        group "zircon"
        dependsOn "buildClazzByJava${useJavaVersion}", ":test:clean", ":test:compileTestJava"
        doLast {
            project(":test").test.executeTests()
        }
    }

    allData.forEach(data -> {
        task "cleanJava${data.version}Clazz"(type: Delete) {
            group "zircon"
            delete "javac/src/main/resources/clazz/" + data.project.split("_")[1]
        }
        task "buildClazzByJava${data.version}" {
            group "zircon"
            dependsOn "${data.project}:clean", "${data.project}:compileJava", "${data.project}:copyJavacClass"
        }
        tasks.findByPath("${data.project}:copyJavacClass").dependsOn("${data.project}:compileJava", ":javac:processResources")
    })


    task cleanAllClazz(type: Delete) {
        group "zircon"
        delete "javac/src/main/resources/clazz/"
    }
    task buildClazzByAllJavaVersion {
        group "zircon"
        dependsOn allData.collect { "buildClazzByJava${it.version}" }
    }

    cleanAllClazz.mustRunAfter(buildClazzByAllJavaVersion)
}


subprojects { subproject ->
    // 定义一个函数来执行逻辑
    def configurePublishLogic = {
        // 检查子模块是否存在 publishToMavenLocal 任务
        if (subproject.tasks.findByName('publishToMavenLocal') != null) {
            // 获取本地 Maven 仓库的路径
            def localMavenRepo = subproject.repositories.mavenLocal().url

            // 定义一个任务来复制 Maven 本地仓库文件
            subproject.task('copyMavenLocalRepo', type: Copy) {
                from localMavenRepo  // 从本地 Maven 仓库复制
                into "${subproject.rootDir}/local-maven-repo"  // 复制到项目根目录下的 local-maven-repo 文件夹
                include '**/*'  // 包含所有文件
            }

            // 在 publishToMavenLocal 任务完成后执行 copyMavenLocalRepo 任务
            subproject.tasks.named('publishToMavenLocal') {
                finalizedBy subproject.tasks.named('copyMavenLocalRepo')
            }
        }
    }

    // 检查项目是否已经完成配置阶段
    if (subproject.state.executed) {
        // 如果已经完成配置阶段，直接执行逻辑
        configurePublishLogic()
    } else {
        // 如果尚未完成配置阶段，通过 afterEvaluate 延迟执行
        subproject.afterEvaluate {
            configurePublishLogic()
        }
    }

}